<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Peng Blog</title>
    <link>https://hellowordcount.github.io/</link>
    <description>Recent content on Peng Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 01 Feb 2019 16:39:42 +0800</lastBuildDate>
    
	<atom:link href="https://hellowordcount.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Centos7 bcc安装</title>
      <link>https://hellowordcount.github.io/post/2019-02-01-centos7-bcc%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 01 Feb 2019 16:39:42 +0800</pubDate>
      
      <guid>https://hellowordcount.github.io/post/2019-02-01-centos7-bcc%E5%AE%89%E8%A3%85/</guid>
      <description>﻿因为hadoop集群，部分节点存在cpu load、cpu system、disk io等告警，需要bcc想过工具分析其性能瓶颈。服务器是centos7，官方没有提供相关安装包，无法直接通过yum install bcc-tools的方式安装。
安装步骤 准备工作 由于线上服务器无法连接外网，需要预先下载一些安装包（如果你的环境可以连接网络，请忽略） kernel-ml-headers-4.18.16-1.el7.elrepo.x86_64.rpm kernel-ml-tools-4.18.16-1.el7.elrepo.x86_64.rpm kernel-ml-tools-libs-4.18.16-1.el7.elrepo.x86_64.rpm http://mirrors.ukfast.co.uk/sites/elrepo.org/archive/kernel/ install-sysdig https://s3.amazonaws.com/download.draios.com/stable/install-sysdig cfe-3.9.1.src.tar.xz http://releases.llvm.org/3.9.1/cfe-3.9.1.src.tar.xz
环境确定 如果内核版本不达标，需要升级内核；笔者的环境存在3.10、4.11、4.18 的kernel。kernel-headers、kernel-devel、kernel-tools、kernel-tools-libs 还是3.10的版本，因此需要对这些包进行升级 主要升级
$ cat /etc/redhat-release CentOS Linux release 7.3.1611 (Core) $ uname -sr Linux 4.18.16-1.el7.elrepo.x86_64 $ yum remove -y kernel-headers-3.10.0-514.el7.x86_64 kernel-devel-3.10.0-514.el7.x86_64 kernel-tools-libs-3.10.0-514.el7.x86_64 kernel-tools-3.10.0-514.el7.x86_64 $ yum localinstall -y kernel-ml-headers-4.18.16-1.el7.elrepo.x86_64.rpm kernel-ml-tools-4.18.16-1.el7.elrepo.x86_64.rpm kernel-ml-tools-libs-4.18.16-1.el7.elrepo.x86_64.rpm  安装sysdig #预先下载 https://s3.amazonaws.com/download.draios.com/stable/install-sysdig $bash install-sysdig  或者
curl -s https://s3.amazonaws.com/download.draios.com/stable/install-sysdig | sudo bash  安装bcc-tools 安装依赖包 yum install -y bison ethtool flex git iperf libstdc++-static \ python-netaddr python-pip gcc gcc-c++ make zlib-devel \ elfutils-libelf-devel cmake3 yum install -y luajit luajit-devel export http_proxy=172.</description>
    </item>
    
    <item>
      <title>Greenplum进程优先级</title>
      <link>https://hellowordcount.github.io/post/2019-01-31-greenplum%E8%BF%9B%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/</link>
      <pubDate>Thu, 31 Jan 2019 10:20:27 +0800</pubDate>
      
      <guid>https://hellowordcount.github.io/post/2019-01-31-greenplum%E8%BF%9B%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/</guid>
      <description>一、GP集群混部 目前GP集群资源使用率大部分时间是比较低的，而服务器配置的资源较高，这样就造成资源浪费，现可以通过混部的模式，在GP集群上使用docker混部storm、nodemanager等应用，充分使用集群资源，但是混部在集群资源紧张、进程较多的时候会影响GP的使用，导致大量的时间都在进程切换，cpu的nice值增高。因此需要调整GP集群进程的nice值，来优化GP集群混部。
二、进程优先级说明  PRI ：Priority 值叫动态优先级，是进程在内核中实际的优先级值，进程优先级的取值范围是通过一个宏定义的，这个宏的名称是MAX_PRIO，它的值为140。Linux实际上实现了140个优先级范围，取值范围是从0-139，这个值越小，优先级越高。0-99表示实时进程，100-139表示普通进程，他们采用的调度算法是不一样的，实时进程更容易获取cpu时间片。普通进程的动态优先级可以通过静态优先级计算获得，动态优先级=max(100,min(静态优先级-bonus+5,139))，其中bonus则是惩罚因子，依赖进程过去运行的情况和进程平均睡眠时间相关，如果小于5，则表示降低动态优先级，大于5则增加动态优先级以示嘉奖。 NI ：进程Nice值，代表这个进程的优先值;取值范围-20~19，调整该值越低，静态优先级越高，获取的cpu时间片就越长 静态优先级：静态优先级的取值范围也是[0-139]，其中 PR 中的 100 to 139 值部分有这么一个对应 PR = 20 + (-20 to +19)，这里的 -20 to +19 便是nice值，所以说两个虽然都是优先级，而且有千丝万缕的关系，但是他们的值，他们的作用范围并不相同。  PRI是比较好理解的，即进程的优先级，或者通俗点说就是程序被CPU执行的先后顺序，此值越小进程的优先级别越高。那NI呢？就是我们所要说的nice值了，其表示进程可被执行的优先级的修正数值。如前面所说，PRI值越小越快被执行，那么加入nice值后，将会使得PRI变为：PRI(new)=PRI(old)+nice。由此看出，PR是根据NICE排序的，规则是NICE越小PR越前（小，优先权更大），即其优先级会变高，则其越快被执行。如果NICE相同则进程uid是root的优先权更大。在LINUX系统中，Nice值的范围从-20到+19（不同系统的值范围是不一样的），正值表示低优先级，负值表示高优先级，值为零则表示不会调整该进程的优先级。具有最高优先级的程序，其nice值最低，所以在LINUX系统中，值-20使得一项任务变得非常重要；与之相反，如果任务的nice为+19，则表示它是一个高尚的、无私的任务，允许所有其他任务比自己享有宝贵的CPU时间的更大使用份额，这也就是nice的名称的来意。进程在创建时被赋予不同的优先级值，而如前面所说，nice的值是表示进程优先级值可被修正数据值，因此，每个进程都在其计划执行时被赋予一个nice值，这样系统就可以根据系统的资源以及具体进程的各类资源消耗情况，主动干预进程的优先级值。在通常情况下，子进程会继承父进程的nice值，比如在系统启动的过程中，init进程会被赋予0，其他所有进程继承了这个nice值（因为其他进程都是init的子进程）。对nice值一个形象比喻，假设在一个CPU轮转中，有2个runnable的进程A和B，如果他们的nice值都为0，假设内核会给他们每人分配1k个cpu时间片。但是假设进程A的为0，但是B的值为-10，那么此时CPU可能分别给A和B分配1k和1.5k的时间片。故可以形象的理解为，nice的值影响了内核分配给进程的cpu时间片的多少，时间片越多的进程，其优先级越高，其优先级值（PRI）越低。%nice，就是改变过优先级的进程的占用CPU的百分比，如上例中就是0.5k/2.5k=1&amp;frasl;5=20%。 由此可见，进程nice值和进程优先级不是一个概念，但是进程nice值会影响到进程的优先级变化。
三、进程优先级查看 查看进程优先级的方法： * top命令 使用top命令可以查看到PR和NI选项 * PR 取值范围为[0,39]表示用户可通过nice值调整那部分区域，即[100,139]，表示的是静态优先级范围，如果该值显示为rt则表示为实时进程 * ps命令
ps -afxo user,ppid,pid,stat,pri,ni,time,command  pa相关参数说明： * a 显示所有进程 * -a 显示同一终端下的所有程序 * -A 显示所有进程 * c 显示进程的真实名称 * -N 反向选择 * -e 等于“-A” * e 显示环境变量 * f 显示程序间的关系 * -H 显示树状结构 * r 显示当前终端的进程 * T 显示当前终端的所有程序 * u 指定用户的所有进程 * -au 显示较详细的资讯 * -aux 显示所有包含其他使用者的行程 * -C&amp;lt;命令&amp;gt; 列出指定命令的状况 * &amp;ndash;lines&amp;lt;行数&amp;gt; 每页显示的行数 * &amp;ndash;width&amp;lt;字符数&amp;gt; 每页显示的字符数 * &amp;ndash;help 显示帮助信息 * &amp;ndash;version 显示版本显示</description>
    </item>
    
    <item>
      <title>使用hugo&#43;github搭建个人博客</title>
      <link>https://hellowordcount.github.io/post/2019-01-27-%E4%BD%BF%E7%94%A8hugo&#43;github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 27 Jan 2019 20:59:31 +0800</pubDate>
      
      <guid>https://hellowordcount.github.io/post/2019-01-27-%E4%BD%BF%E7%94%A8hugo&#43;github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description> summary 作为一个技术人员，经常 - 安装hugo - 申请github账号
准备 安装hugo  </description>
    </item>
    
    <item>
      <title>欢迎来到徐鹏的博客</title>
      <link>https://hellowordcount.github.io/post/helloworld/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hellowordcount.github.io/post/helloworld/</guid>
      <description>  “Yeah It&amp;rsquo;s on. ”
 Hello World! </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hellowordcount.github.io/search/placeholder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hellowordcount.github.io/search/placeholder/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hellowordcount.github.io/top/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hellowordcount.github.io/top/about/</guid>
      <description>徐鹏 就职于同程艺龙，大数据研发工程师。 联系方式： github： https://github.com/hellowordcount email： 1197071495@qq.com
   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hellowordcount.github.io/top/books/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hellowordcount.github.io/top/books/</guid>
      <description>_ Building&amp;hellip; _</description>
    </item>
    
  </channel>
</rss>